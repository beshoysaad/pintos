		    +---------------------------+
		    |             OS            |
		    | PROJECT 3: VIRTUAL MEMORY |
		    |      DESIGN DOCUMENT      |
		    +---------------------------+

---- GROUP ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Beshoy Saad         <s8besaad@stud.uni-saarland.de> 2572741
Sandro Montemezzani <s8samont@stud.uni-saarland.de> 2563261

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct process
{
  ...
  struct hash *page_table;
  struct semaphore page_table_sema;
  ...
}
Two members have been introduced to the process struct.
One pointer for the page table and a semaphore for all operations
on the page table.


enum page_type
{
  PAGE_TYPE_FILE, PAGE_TYPE_SWAP, PAGE_TYPE_ZERO
};
Indicates type of page (loaded from file, swap, or zeroed out)


struct file_storage
{
  struct file *f;       // pointer to the backing file 
  off_t size;			// size to load from the file
  off_t offset; 		// offset to read after
  bool read_only;		// is this segment read-only?
};
Stores data about file backing this page.


union page_storage
{
  struct file_storage fs;			// holds info about file storage
  block_sector_t swap_sector;		// holds swap slot number
};
Holds information about the type of storage backing this page, either file info or swap slot number.

struct page
{
  struct hash_elem h_elem;			// element of hash table
  void *user_address;				// user page virtual address
  uint32_t *pagedir;				// page directory
  struct frame *f;					// pointer to associated frame struct or NULL
  enum page_type type;				// page type
  bool writable;					// is the page writable?
  union page_storage ps;			// info about page backing storage
};
Struct to hold data relevant to the page. Used in page table.


---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

First we locate the page in the page hash table. This is trivial since
the hash table is indexed by user virtual address of the page.
Each page struct contains a pointer to the corresponding frame struct.
The frame struct contains a pointer to the kernel virtual address of 
the physical frame containing the page's data. 
If the page is not present then the frame struct pointer is NULL, and 
the page is swapped in from storage location.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We update the dirty and accessed bits of user pages when accessed from 
kernel code. This only happens during system calls. When deciding which
page to evict, we rely on the dirty and accessed bits of the user page
only.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

Races are avoided by using a semaphore `frame_table_sema' on frame table
operations during frame aquisitions. Only one process at a time can
allocate a new frame. The function palloc_get_page internally uses 
a bitmap and a lock to atomically return a frame to the caller. In 
addition, each frame has its own semaphore that is downed once the frame is
allocated and is upped by the code that is allocating the frame.


---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

Since pages need to be handled on a per process basis, the best
solution was to store the information in the process struct. In
addition, keeping track of the associated frame inside the page 
struct and the associated page inside the frame struct makes it 
trivial to extract physical to virtual mappings and vice versa.
Also, using hash tables to store frames and pages makes it 
efficient to retrieve any page or frame using their user/kernel
virtual address

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Not applicable

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We loop through all the frames in the frame table. For every frame, 
if the accessed bit is true, we set it to false and move over to 
the next frame. If the accessed bit is already false, we try to evict 
this frame by first clearing its page from the CPU page table, and 
then writing its data to disk if it's a swap page or if its dirty
bit is true. After the write is done we clear the dirty bit of the
page. If the eviction is successful, we recycle the evicted frame
for a new page. This is an implementation of the clock algorithm.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

In the page table of process Q, we update the frame pointer of the 
evicted page to point to NULL. We also use the function 
pagedir_clear_page to remove the entry associating Q's page to the 
frame. The frame's page pointer now points to P's page, and P's page's 
frame pointer now points to the frame.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

If the fault address's page address doesn't exceed the maximum stack size 
(1 MB) below PHYS_BASE and the faulting address is not below the stack 
pointer by more than 32 bytes (to allow PUSHA instructions), we allow 
the stack to grow.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

In order for deadlock to occur, circular lock dependency must be present.
This is not the case in our code, as we always try to allocate a frame 
first, then if that succeeds we try to allocate a page. 

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

Before beginning the eviction process (writing to disk), we use the 
function pagedir_clear_page to remove the page table entry of the 
page being evicted from the CPU's page table. This means that no 
user process can access that page anymore. We also down the semaphore 
associated with the page being evicted so that no other process can 
fault it back in.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

Each frame has an associated semaphore that is downed whenever an operation
is being done on that frame (e.g. being in the process of installing a 
page from swap). This prevents scenarios like the one in the question.

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

First we try to translate the user address into kernel address using 
pagedir_get_page. If that fails we try to get the needed page from 
disk storage (either file or swap). If that also fails we try to extend
the stack to accomodate the user address. If none of that works then we 
determine that the address is invalid and we terminate the process.
Once we have the page we need, we down its semaphore so that it cannot be
evicted until we are done with it.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

We chose to have 1 semaphore per frame or page, in addition to a global semaphore 
for the whole frame/page hash table. This way, when code is trying to modify the
table itself by e.g. adding a new page or frame, it has to down the global semaphore. 
The per-page or -frame semaphore helps avoid races between evicting and loading
pages between memory and disk, and also helps with pinning user pages while kernel 
code is using them. 

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct process {
  ...
  mapid_t mapping_counter;			// counter for mapping IDs in this process
  struct hash *mapping_table;		// pointer to the mapping hash table
  struct lock mapping_table_lock;	// lock for the mapping table
};
Members holding mapping infrastructure for this process

struct mapping {
  struct hash_elem h_elem;  // Hash element for the mapping table
  mapid_t map_id;           // mapping id
  void *upage;              // userspace address this mapping is for
  int num_pages;            // over how many pages the mapping stretches
};
This structure holds the metadata for a single mapping.

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem. Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

We treat memory mapped files like normal pages that are loaded from a 
file. When a page is evicted it is written back to its file if it was 
loaded from one, or to swap if it wasn't. Exceptions to that are 
pages that are zeroed out and not dirty, which are just thrown away
and set to zero when they are swapped back in, and pages that are read-only,
which are written to swap instead of their source file.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

When we try to insert a new page into the page table, we observe the 
return value. If it's not NULL, then a page of the same user virtual 
address exists, and the mapping process is aborted.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

We use the function load_segment to load both executables and memory 
mapped files, so the code is completely shared.

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
