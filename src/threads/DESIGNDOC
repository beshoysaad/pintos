			+--------------------+
			|         OS         |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+

---- GROUP ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Daniel Kindler <s8dakind@stud.uni-saarland.de> 2570566
Sandro Montemezzani <s8samont@stud.uni-saarland.de> 2563261

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Extension of enum thread_status:
	/* A new possible state. Allows more effecient thread-management */
	THREAD_SLEEPING
    
New member in struct thread:
    /* A sleeping thread needs to know its time to be woken up */
    
    int64_t wakeup_time
  
New member in struct thread:
	/* A new list where threads in state THREAD_SLEEPING are put 
	 * Instead of busy-wait a thread registers here in order to sleep until a certain time */
    
    struct list_elem sleepelem
      
/* List of processes in SLEEPING state, that is, processes that wait until
 * a certain point of time */
	
	static struct list sleeping_list;
    

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

modified function timer_sleep(int64_t ticks) :
	Calls call thread_sleep(start + ticks), where start is the current timer's value.
	start + ticks is the time when the thread likes to wake up again.
	In thread_sleep (int64_t wakeup_time):
	Set current threads status to THREAD_SLEEPING and its wakeup_time to wakeup_time.
	Then schedules a new thread by calling schedule().
	schedule chooses a new thread by calling next_thread_to_run (void) (modified too).
	
modified function next_thread_to_run (void) :
	At some times threads on the sleeping_list have to be checked, if they should wake up.
	That should happen not too often, but frequently.
	We've chosen next_thread_to_run as the place where sleeping_list is checked.
	Before a thread from ready_list is chosen as next thread to run, all threads from sleeping_list
	that are over time will be put on ready_list and thereby get a chance to be chosen.
	Waking threads up happens by calling the new function void thread_wakeup (int64_t timer).

new function void thread_wakeup (int64_t timer) :
	The list sleeping_list is ordered. That allows better performance.
	Iterating through sleeping_list starting with the first element (smallest wakeuptime)
	until the current elemet's thread's wakeuptime is in the future - then we're done - return.
	At the end of each iteration, the current element is removed from sleeping_list and put to ready_list.
	Its status is set to THREAD_READY. 
	
What happens when timer interrupt occurs:
	The program counter jumps to the code of function void intr_handler (struct intr_frame *frame).
	From this function the timer_interrupt routine is started.
	ticks is incremented.
	Then (in function thread_tick()) 
	thread_ticks is incremented (the number of current thread's ticks since active)
	If TIME_SLICE is reached, the variable yield_on_return is set to true.
	The timer interrupt routine returns to interrupt handler.
	The variables external and yield_on_return are true, so thread_yield() is called.
	thread_yield() calls schedule calls next_thread_to_run () calls thread_wakeup(timer_ticks()).
	This is how a timer interrupt could wake up a sleeping thread - if TIME_SLICE has been reached.
	
	
>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
	
First:
	The function thread_wakeup(int64_t) is only called when switched to a new thread.
	It would'nt make any sense to check more often - if the check never leads to a switch itself.
	For most timer-interrupts the interrupt routine is not longer than usually.
Second:
	thread_wakeup(int64_t) iterates over the sleeping_list, waking everyone up whose wakeup_time
	has been reached. The sleeping_list is ordered, so all missing elements can be skipped if the
	routine reaches one element that is not yet ready.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?


    		     PROD/CONS
	  		     =========

---- SYNCHRONIZATION ----

>> B1: How does your solution guarantee that consumers will hold until
>> there is something to consume in the buffer?

It is guaranteed that consumers will hold until there is something to
consume since they will first check whether the buffer is empty. If it is
actually empty, they will suspend the thread execution until `buffer_not_emtpy'
is signaled to them. And only then they continue with consuming a character.
And since the check whether the buffer is empty is guarded the aquisition
of a lock, it is ensured that only one consumer at a time performs this check.

>> B2: How does your solution guarantee that producers will hold until
>> there is some free space in the buffer?

It is guaranteed that producers will hold until there is free space in the
buffer since for each character they want to produce, they will first check
whether the buffer is not full. If it is full, the suspend the thread
execution until `buffer_not_full' is signaled to them, and only then they
continue producing that character.
And since the check whether the buffer is already full is guarded by the
aquisition of a lock, it is ensured that only one producer at a time performs
this check.

>> B3: How does your solution preserve a FIFO semantics i.e., the first
>> character produced will be the first to be consumed?

The buffer is implemented as a circular buffer with constant length N.
It has a current reading index and a current writing index. Each read
or write targets the character with the according index in the buffer, and
afterwards the accroding index will be increased. If the index then overflows
the size of the buffer, it will be reset to the front of the buffer.
Therefore, if the reading index and writing index are the same, the buffer
is either empty or full, thus we need to store the amount of currently stored
items as well.

---- RATIONALE ----

>> B4: Give an intuition for why your program preserves safety.

The program is preserving safety since every access to both buffer and output
are guard behind a lock. Thus, no data races should occur.

>> B5: Why did you choose this design? Did you consider other design
>> alternatives? In what ways is it superior to another design you considered?

we chose this design since it does not lead to too much complexity in the
program logic, and thus shoudl be safer.


			     NARROW BRIDGE
			     =============

---- SYNCHRONIZATION ----

>> C1: How does your solution guarantee that no more that 3 vehicles
>> are crossing the bridge in the same direction?

>> C2: What prevents vehicles from opposite directions from crossing the
>> bridge simultaneously?

>> C3: How does your solution grant priority to emergency vehicles over
>> the queue of vehicles ahead in the same direction?

>> C4: How do you guarantee that despite having priority, emergency vehicles
>> do not start crossing the bridge while there are still vehicles crossing
>> it in the oposite direction?

>> C5: Explain with examples why your solution does not preserve neither
>> fairness nor freedom from starvation, other than what has been indicated
>> for emergency vehicles.

---- RATIONALE ----

>> C6: Why did you choose this design? Did you consider other design
>> alternatives? In what ways is it superior to another design you considered?


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
