			+--------------------+
			|         OS         |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+

---- GROUP ----

>> Fill in the names, email addresses and matriculation numbers of your group members.

Beshoy Saad <s8besaad@stud.uni-saarland.de> 2572741
Xuwen Yao <s8xuyaoo@stud.uni-saarland.de> 2576017

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct thread two new members: 
	
	int64_t ticks_to_sleep;             /* Number of clock ticks to sleep */
	- Keeps track of the number of clock ticks for the thread to sleep as 
	passed to timer_sleep()
	
	struct semaphore sema_sleep;	/* Semaphore used to wake thread up after sleeping */
	- Used to put the thread to sleep (by downing the semaphore) and wake it
	up (by upping the semaphore) after approximately ticks_to_sleep timer ticks

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

When timer_sleep() is called, interrupts are first disabled because we are about to 
modify a shared variable (ticks_to_sleep). Then, the member ticks_to_sleep of the current
thread struct is updated with the value passed to timer_sleep() as ticks. Next, we initialize
the semaphore sema_sleep with the value 0 and then call sema_down() on it, which results in 
the thread getting blocked until the semaphore is upped. Finally, we restore interrupts.
In the timer interrupt handler, we decrement ticks_to_sleep of any thread that is sleeping
(i.e. blocked + ticks_to_sleep > 0). When ticks_to_sleep reaches zero, we up the semaphore 
which results in the sleeping thread getting unblocked.


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

TODO

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Race conditions are avoided by disabling interrupts at the beginning of the 
function and restoring them at the end

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Since interrupts are disabled for the duration of timer_sleep(), if a timer interrupt
occurs during a call to timer_sleep() it will be postponed until the function returns,
thus avoiding race conditions

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

TODO


    		     PROD/CONS
	  		     =========

---- SYNCHRONIZATION ----

>> B1: How does your solution guarantee that consumers will hold until
>> there is something to consume in the buffer?

>> B2: How does your solution guarantee that producers will hold until
>> there is some free space in the buffer?

>> B3: How does your solution preserve a FIFO semantics i.e., the first
>> character produced will be the first to be consumed?

---- RATIONALE ----

>> B4: Give an intuition for why your program preserves safety.

>> B5: Why did you choose this design? Did you consider other design
>> alternatives? In what ways is it superior to another design you considered?


			     NARROW BRIDGE
			     =============

---- SYNCHRONIZATION ----

>> C1: How does your solution guarantee that no more that 3 vehicles
>> are crossing the bridge in the same direction?

>> C2: What prevents vehicles from opposite directions from crossing the
>> bridge simultaneously?

>> C3: How does your solution grant priority to emergency vehicles over
>> the queue of vehicles ahead in the same direction?

>> C4: How do you guarantee that despite having priority, emergency vehicles
>> do not start crossing the bridge while there are still vehicles crossing
>> it in the oposite direction?

>> C5: Explain with examples why your solution does not preserve neither
>> fairness nor freedom from starvation, other than what has been indicated
>> for emergency vehicles.

---- RATIONALE ----

>> C6: Why did you choose this design? Did you consider other design
>> alternatives? In what ways is it superior to another design you considered?


			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future semesters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the semester.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future semesters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future semesters or the remaining projects?

>> Any other comments?
